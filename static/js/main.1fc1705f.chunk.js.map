{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","state","flip","_this","setState","toFront","react_default","a","createElement","className","this","onClick","onMouseLeave","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,uKCmFzBC,0NA7EbC,MAAO,CACLC,MAAK,KAGTA,KAAO,WACLC,EAAKC,SAAS,CACZF,MAAQC,EAAKF,MAAMC,UAIvBG,QAAU,WACRF,EAAKC,SAAS,CAACF,MAAK,6EAGlB,OACEI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAIfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,KAAKT,MAAMC,KAAO,uBAAyB,iBAAkBS,QAASD,KAAKR,MACzFI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mBACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0BAAb,gBAEFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAf,WAKAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAAiBG,aAAcF,KAAKL,SACjDC,EAAAC,EAAAC,cAAA,OAAKK,MAAM,aACTP,EAAAC,EAAAC,cAAA,4EAQZF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UAIDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAf,SAICH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,QAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAf,UAIAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UAGIH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,UAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,mBAtEIK,cCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOf,EAAAC,EAAAC,cAACc,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1fc1705f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './css/style.scss';\n\nclass App extends Component {\n\n  state ={\n    flip:false\n  }\n\nflip = () => { \n  this.setState({\n    flip : !this.state.flip\n  })\n}\n\ntoFront = () => {\n  this.setState({flip:false})\n}\n  render() {\n    return (\n      <div className=\"App\">\n      <div className=\"grid-container\">\n          <div className=\"grid-Header\">\n\n          </div>\n\n          <div className=\"grid-Main\">\n            <div className={this.state.flip ? \"flip-container front\" : \"flip-container\"} onClick={this.flip} >\n              <div className=\"flipper\">\n                <div className= \"card tile-front\">\n                  <div className=\"bg-tile\">\n                    <i className=\"material-icons m_emote\">account_box</i>\n                  </div>\n                  <div className=\"card-body\">\n                    <p>5 Users</p>\n                  </div>\n                  <div className=\"card-footer text-muted m_desc\">\n                      Online\n                  </div>\n                </div>\n\n                  <div className=\"card tile-back\" onMouseLeave={this.toFront}>\n                    <div class=\"card-body\">\n                      <p>User online correspond to people connected on your network</p>\n                    </div>\n                  </div>\n\n              </div>\n            </div>\n          </div>\n\n          <div className=\"grid-Header\">\n              Header\n          </div>\n\n         <div className=\"grid-Right\">\n              right\n          </div>\n\n          <div className=\"grid-Menu\">\n              menu\n          </div>\n\n          <div className=\"grid-Footer\">\n              footer\n          </div>\n\n          <div className=\"colum1\">\n              colum1\n              </div>\n              <div className=\"colum2\">\n                colum2\n              </div>\n              <div className=\"colum3\">\n                colum3\n              </div>\n       </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n// {this.state.flip ? \"flip-container front\" : \"flip-container\"} ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}